{
  "openapi": "3.0.2",
  "info": {
    "version": "0.0.1",
    "title": "RevEl API Documentation",
    "termsOfService": "",
    "contact": {
      "email": "contact@digilytics.ai",
      "url": "https://www.digilytics.ai/contact-us"
    },
    "license": {
      "name": "Digilytics©"
    },
    "x-logo": {
      "url": "https://res.cloudinary.com/crunchbase-production/image/upload/c_lpad,h_170,w_170,f_auto,b_white,q_auto:eco,dpr_1/faxbuv6vzklzr8bzka23"
    },
    "description": "# Introduction\r\nRevEl is a first of its kind, easy-to-use AI product for helping automate the mortgage origination process.\r\nIt has the ability to classify & extract data from a variety of mortgage documents. It also offers flexibility\r\nto define and manage rules in terms of “Correctness, Completeness and Consistency” across an\r\napplication. You can execute the configured rules & visualize the validation results using our interface (UI).\r\nAdditionally, it also offers an archival of cases based on the business requirement of the client\r\n\r\nIt has a microservices-based application architecture deployed on Azure Kubernetes Service (AKS).\r\nServices are organized around their capabilities and communicate with each other using well-defined\r\ninterfaces.\r\n\r\n# Definition of key terms \r\nThis section explains the key terms used in order to get a better understanding of how the\r\ndifferent APIs function.\r\n---\r\n## Company\r\n- Company is the base entity inside the product. For onboarding a new client, the first step is to create a\r\n  new company and assign relevant licences to it.\r\n\r\n- Upon successful registration, the client gets an id which is internally referred by us as the `companyId`.\r\n  This is required by most of the APIs to access the protected resources.\r\n\r\n## Product\r\n- Once a Company is created within our system, a new Product can be created which is completely client\r\n  specific.\r\n\r\n- Typically, a Product gives you the flexibility to define the structure of your mortgage application & how\r\n  the different documents are going to be logically categorised.\r\n\r\n- At the time of defining the Product, you have the flexibility to define the different Sections, Sub-Sections\r\n  & their aliases.\r\n\r\n- An alias can be used for calling the RESTful API involving operations related to different Sections. A typical\r\n  example of a product is: ***US Residential, UK Commercial*** etc.\r\n\r\n\r\n<img src=\"/images/product.png\">\r\n\r\n\r\n## Section\r\n- A Section is where pages get logically categorised after Classification. You have the ability to define\r\ndifferent Sections and Sub-Sections within a product.</br>\r\nExample :\r\n>Product: **“US commercial”** </br>\r\n>Section: **“Correspondence”** </br>\r\n>Sub-Section: **“Broker Email”**, **“Submission Checklist”** & **“Secure Loan Submission”** </br>\r\n\r\n\r\n- A Sub-Section can also be referred as a Document Category from a business user’s standpoint. </br>\r\n\r\n\r\n<img src=\"/images/section.png\">\r\n\r\n\r\n## Section Version\r\n- A Sub-Section can have multiple versions created within it, called as a Section Version. A Section Version\r\n  refers to the location where the classified pages finally reside. The purpose of having a Section Version is\r\n  to maintain different copies of the same logical documents.\r\n\r\n- However, different clients use this differently based on their requirements and there is no restriction on\r\n  the user as to how he/she wants to store the different set of documents within the different Section\r\n  Versions of a section.\r\n\r\n- After the Classification of the pages within a Section is done by the model, RevEl can either automatically\r\n  create a new Section Version and assign the relevant pages to it or it can keep the classified pages into a\r\n  temporary queue called as New Documents.</br>\r\n\r\n<i>*This behaviour is configurable using the admin configuration console based on the client’s requirement.</i>\r\n\r\n\r\n<img src=\"/images/section_version.png\">\r\n\r\n\r\n## New Document\r\n- RevEl will create a New Documents queue which allows users to manually move these pages into an\r\n  existing /new Section Version.\r\n\r\n<i>*The configuration of the Product for this functionality to work will have to be done in a way so that\r\n  RevEl doesn’t assign the pages classified by the model into a Section Version directly.\r\n</i>\r\n\r\n\r\n<img src=\"/images/new_document.png\">\r\n\r\n\r\n## Business Entity Id\r\n- A `businessEntityId` refers to the applicant’s external reference as supplied to RevEl during a document\r\n  upload from a transactional system using our RESTful API or RevEl (UI)\r\n\r\n\r\n<img src=\"/images/business_entity_id.png\">\r\n\r\n\r\n## Case Id\r\n- Case Id is the additional Id generated within RevEl corresponding to the applicant’s external reference\r\n  (Business Entity Id).\r\n\r\n- This is mostly used for an internal reference.\r\n\r\n\r\n<img src=\"/images/product.png\">\r\n\r\n\r\n[comment]: <> (  <img src=\"https://th.bing.com/th/id/OIP.Ix6XjMbuCvoq3EQNgJoyEQHaFj?pid=ImgDet&rs=1\">)\r\n\r\n\r\n\r\n\r\n[comment]: <> (<pre><code>indented code)\r\n\r\n[comment]: <> (</code></pre>)\r\n[comment]: <> (<table><tr><td>)\r\n\r\n[comment]: <> (<pre>)\r\n\r\n[comment]: <> (**Hello**,)\r\n\r\n[comment]: <> (_world_.)\r\n\r\n[comment]: <> (</pre>)\r\n\r\n[comment]: <> (</td></tr></table>)\r\n",
    "externalDocs": {
      "description": "Find out how to create a GitHub repo for your OpenAPI definition.",
      "url": "https://github.com/Rebilly/generator-openapi-repo"
    }
  },
  "tags": [
    {
      "name": "Authentication API",
      "description": "- Authentication API enables customers and end users to have a single-entry point for authentication.\r\n  Whether it is a product integration or service integration approach, the authentication endpoint is\r\n  common for both.\r\n\r\n- This API end point can be used to authenticate against RevEl and generate a JWT token which can be\r\n  used against other parts of the API which require authentication.\r\n\r\n\r\n<i>*The Authentication Token will expire after 7 days or before licence expiry date of the Company, (whichever\r\n  is less). API endpoint will need to be utilised again to generate a new token once a token is expired. </i>\r\n\r\n### Utilising the Authentication Token \r\n\r\n- Once the API has returned an Authentication Token, it needs to be set in further calls to the API in\r\n  header named \"Authorization\", prefixed with the term \"Bearer-\". \r\n\r\n```\r\ncurl -X GET --header 'Accept: application/json' --header 'Authorization: Bearer-\r\n 63d92e33d4e8 'https://client-id.digilytics.solutions/api/v1/oculyse/api/v1/{compa \r\nnyId}/e-file/{productId}/download/' \r\n <!-- (Note: Line breaks and additional request param are removed for ease of readi \r\nng only) -->\r\n\r\n```\r\n   where 63d92e33d4e8 is the token returned from the Authentication API. Token has been truncated for\r\nbrevity. \r\n"
    }
  ],
  "servers": [
    {
      "url": "https://client-id.digilytics.solutions/"
    }
  ],
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Authentication API"
        ],
        "summary": "login",
        "operationId": "loginUsingPOST",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Id Token to access the protected resource.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "loginForm",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserLoginModel"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          }
        },
        "x-codeSamples": [
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://client-id.digilytics.solutions/api/v1/auth/login\");\r\nclient.Timeout = -1;\r\nvar request = new RestRequest(Method.POST);\r\nrequest.AddHeader(\"accept\", \"*/*\");\r\nrequest.AddHeader(\"Content-Type\", \"application/json\");\r\nvar body = @\"{\" + \"\\n\" +\r\n@\"  \"\"email\"\": \"\"string\"\",\" + \"\\n\" +\r\n@\"  \"\"password\"\": \"\"string\"\"\" + \"\\n\" +\r\n@\"}\";\r\nrequest.AddParameter(\"application/json\", body,  ParameterType.RequestBody);\r\nIRestResponse response = client.Execute(request);\r\nConsole.WriteLine(response.Content);"
          },
          {
            "lang": "CURL",
            "source": "curl --location --request POST 'https://client-id.digilytics.solutions/api/v1/auth/login' \\\r\n--header 'accept: */*' \\\r\n--header 'Content-Type: application/json' \\\r\n--data-raw '{\r\n  \"email\": \"string\",\r\n  \"password\": \"string\"\r\n}'"
          },
          {
            "lang": "JAVA",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\r\n        .build();\r\n        MediaType mediaType = MediaType.parse(\"application/json\");\r\n        RequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"email\\\": \\\"string\\\",\\n  \\\"password\\\": \\\"string\\\"\\n}\");\r\n        Request request = new Request.Builder()\r\n        .url(\"https://client-id.digilytics.solutions/api/v1/auth/login\")\r\n        .method(\"POST\", body)\r\n        .addHeader(\"accept\", \"*/*\")\r\n        .addHeader(\"Content-Type\", \"application/json\")\r\n        .build();\r\n        Response response = client.newCall(request).execute();"
          },
          {
            "lang": "PHP",
            "source": "<?php\r\n\r\n$curl = curl_init();\r\n\r\ncurl_setopt_array($curl, array(\r\n  CURLOPT_URL => 'https://client-id.digilytics.solutions/api/v1/auth/login',\r\n  CURLOPT_RETURNTRANSFER => true,\r\n  CURLOPT_ENCODING => '',\r\n  CURLOPT_MAXREDIRS => 10,\r\n  CURLOPT_TIMEOUT => 0,\r\n  CURLOPT_FOLLOWLOCATION => true,\r\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\r\n  CURLOPT_CUSTOMREQUEST => 'POST',\r\n  CURLOPT_POSTFIELDS =>'{\r\n  \"email\": \"string\",\r\n  \"password\": \"string\"\r\n}',\r\n  CURLOPT_HTTPHEADER => array(\r\n    'accept: */*',\r\n    'Content-Type: application/json'\r\n  ),\r\n));\r\n\r\n$response = curl_exec($curl);\r\n\r\ncurl_close($curl);\r\necho $response;\r\n"
          },
          {
            "lang": "PYTHON",
            "source": "import http.client\r\nimport json\r\n\r\nconn = http.client.HTTPSConnection(\"client-id.digilytics.solutions\")\r\npayload = json.dumps({\r\n  \"email\": \"string\",\r\n  \"password\": \"string\"\r\n})\r\nheaders = {\r\n  'accept': '*/*',\r\n  'Content-Type': 'application/json'\r\n}\r\nconn.request(\"POST\", \"/api/v1/auth/login\", payload, headers)\r\nres = conn.getresponse()\r\ndata = res.read()\r\nprint(data.decode(\"utf-8\"))"
          }
        ],
        "x-codegen-request-body-name": "loginForm"
      }
    }
  },
  "components": {
    "schemas": {
      "LoginForm": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The unique client email provided. Supplied offline with configuration sheet"
          },
          "password": {
            "type": "string",
            "description": "Password for a user, set up while onboarding a client, supplied by RevEl separately"
          }
        }
      },
      "UserBaseModel": {
        "title": "UserBaseModel",
        "type": "object",
        "properties": {
          "companyUserId": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "description": "User email-id"
          },
          "id": {
            "description": "User Id",
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "description": "Name of the user",
            "type": "string"
          },
          "roles": {
            "description": "List of assigned roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rolesDisplayName": {
            "description": "List of display name of the roles. Example: ROLE_ADMIN = Role Admin ",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserLoginModel": {
        "title": "UserLoginModel",
        "type": "object",
        "properties": {
          "idToken": {
            "type": "string",
            "description": "Access Token for calling subsequent APIs."
          },
          "loginType": {
            "type": "string",
            "enum": [
              "WL",
              "CR",
              "SC"
            ]
          },
          "user": {
            "$ref": "#/components/schemas/UserBaseModel"
          }
        }
      }
    }
  }
}